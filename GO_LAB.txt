__________________WEEK 1________________


package main
import "fmt"
func lcm(temp1 int, temp2 int) {
	var lcmnum int = 1
	if temp1 > temp2 {
		lcmnum = temp1
	} else {
		lcmnum = temp2
	}
	for {
		if lcmnum%temp1 == 0 && lcmnum%temp2 == 0 {
			fmt.Printf("LCM of %d and %d is %d", temp1, temp2, lcmnum)
			break
		}
		lcmnum++
	}
	return
}
func gcd(temp1 int, temp2 int) {
	var gcdnum int = 1
	for i := 1; i <= temp1 && i <= temp2; i++ {
		if temp1%i == 0 && temp2%i == 0 {
			gcdnum = i
		}
	}
	fmt.Printf("GCD of %d and %d is %d", temp1, temp2, gcdnum)
	return
}
func main() {
	var n1, n2, action int
	fmt.Println("Enter two Positive Integers: ")
	fmt.Scanln(&n1)
	fmt.Scanln(&n2)
	fmt.Println("Enter 1 for LCM and 2 for GCD")
	fmt.Scanln(&action)
	switch action {
	case 1:
		lcm(n1, n2)
	case 2:
		gcd(n1, n2)
	}
}


__________________WEEK 2________________


package main
import "fmt"
func main() {
	var rows, k, temp, temp1 int
	fmt.Print("Enter number of rows:")
	fmt.Scan(&rows)
	for i := 1; i <= rows; i++ {
		for j := 1; j <= rows-i; j++ {
			fmt.Print(" ")
			temp++
		}
		for {
			if temp <= rows-1 {
				fmt.Printf("%d", i+k)
				temp++
			} else {
				temp++
				fmt.Printf("%d", (i + k - 2*temp1))
			}
			k++
			if k == 2*i-1 {
				break
			}
		}
		temp = 0
		temp1 = 0
		k = 0
		fmt.Println(" ")
	}
}


__________________WEEK 3________________

____main.go___

package main
import (
	parent "family/father"
	child "family/father/son"
	"fmt"
)
func main() {
	f := new(parent.Father)
	fmt.Println(f.Data("Mr.RAM"))
	c := new(child.Son)
	fmt.Println(c.Data("LAVA KUSA"))
}


___father.go___

package father
import "fmt"
func init() {
	fmt.Println("Father Package Initialized")
}
type Father struct {
	Name string
}
func (f Father) Data(name string) string {
	f.Name = "Father:" + name
	return f.Name
}


___son.go___

package son
import "fmt"
func init() {
	fmt.Println("Son Package Initialized")
}
type Son struct {
	Name string
}
func (s Son) Data(name string) string {
	s.Name = "Son:" + name
	return s.Name
}


__________________WEEK 4________________


package main
import (
	"fmt"
	"math"
)
func main() {
	var num [10]float64
	var sum, mean, sd float64
	fmt.Println("**Enter 10 Elements***")
	for i := 1; i <= 10; i++ {
		fmt.Printf("Enter %d Element:", i)
		fmt.Scan(&num[i-1])
		sum += num[i-1]
	}
	mean = sum / 10
	for j := 0; j < 10; j++ {
		sd += math.Pow(num[j]-mean, 2)
	}
	sd = math.Sqrt(sd / 10)
	fmt.Println("The SD is:", sd)
}


__________________WEEK 5________________


package main
import "fmt"
func main() {
	var rows int
	var temp int = 1
	fmt.Print("Enter number of rows:")
	fmt.Scan(&rows)
	for i := 1; i <= rows; i++ {
		for k := 1; k <= i; k++ {
			fmt.Printf("%d ", temp)
			temp++
		}
		fmt.Println(" ")
	}
}


__________________WEEK 6________________


package main
import "fmt"
func main() {
	fmt.Print("Enter first string:")
	var first string
	fmt.Scanln(&first)
	fmt.Print("Enter second string:")
	var second string
	fmt.Scanln(&second)
	fmt.Print(first + second)
}


__________________WEEK 7________________


package main
import (
	"fmt"
	"strings"
)
func Reverse(s string) (result string) {
	for _, v := range s {
		result = string(v) + result
	}
	return
}
func isPalindrome(str string) interface{} {
	if str == Reverse(str) {
		return true
	}
	return false
}
func main() {
	var str string
	fmt.Print("Enter a string:")
	fmt.Scan(&str)
	if isPalindrome(strings.ToUpper(str)) == true {
		fmt.Print(str, " is a palindrome")
	} else {
		fmt.Print(str, " is not a palindrome")
	}
}



